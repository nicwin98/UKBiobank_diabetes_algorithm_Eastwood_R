### Notes: 
#### Includes cases reported at repeat visits from UK Biobank (instance 0, 1, 2)
#### Other considerations not included here: HbA1c levels, ICD9/10codes

```{r}
library(here)
library(tidyverse)
library(data.table)
```

#### Load dataset
The data was originally imported to R using the ukb_df function in the ukbtools package. This adds logical names to each column name. fread from the data.table package is recommended for fast import of data. 

```{r}
df <- fread(here("data-raw/ukb_data.csv")) 
```

### Demographic information necessary for algorithms to run
#### Sex
```{r}
df[sex_f31_0_0 == "Female", sex := 0]
df[sex_f31_0_0 == "Male", sex := 1]
df[, .N, by="sex"]
```

#### Ethnicity
All ethnic groups
```{r}
df[, ethnic_all := ethnic_background_f21000_0_0]
df[ethnic_background_f21000_0_0 == "Caribbean", ethnic_all := 4001]
df[ethnic_background_f21000_0_0 == "Indian", ethnic_all := 3001]
df[ethnic_background_f21000_0_0 == "White", ethnic_all := 1]
df[ethnic_background_f21000_0_0 == "White and Black Caribbean", ethnic_all := 2001]
df[ethnic_background_f21000_0_0 == "British", ethnic_all := 1001]
df[ethnic_background_f21000_0_0 == "Pakistani", ethnic_all := 3002]
df[ethnic_background_f21000_0_0 == "Mixed", ethnic_all := 2]
df[ethnic_background_f21000_0_0 == "African", ethnic_all := 4002]
df[ethnic_background_f21000_0_0 == "Irish", ethnic_all := 1002]
df[ethnic_background_f21000_0_0 == "White and Black African", ethnic_all := 2002]
df[ethnic_background_f21000_0_0 == "Bangladeshi", ethnic_all := 3003]
df[ethnic_background_f21000_0_0 == "Asian or Asian British", ethnic_all := 3]
df[ethnic_background_f21000_0_0 == "Any other Black background", ethnic_all := 4003]
df[ethnic_background_f21000_0_0 == "Any other white background", ethnic_all := 1003]
df[ethnic_background_f21000_0_0 == "White and Asian", ethnic_all := 2003]
df[ethnic_background_f21000_0_0 == "Any other Asian background", ethnic_all := 3004]
df[ethnic_background_f21000_0_0 == "Black or Black British", ethnic_all := 4]
df[ethnic_background_f21000_0_0 == "Any other mixed background", ethnic_all := 2004]
df[ethnic_background_f21000_0_0 == "Chinese", ethnic_all := 5]
df[ethnic_background_f21000_0_0 == "Other ethnic group", ethnic_all := 6]
df[ethnic_background_f21000_0_0 == "Do not know", ethnic_all := -1]
df[ethnic_background_f21000_0_0 == "Prefer not to answer", ethnic_all := -3]

count(df, ethnic_all)
df[, .N, by="ethnic_all"]

```

Main ethnic groups (NB this makes some assumptions i.e. British is white, and does not include mixed, Chinese or other Asian)
```{r}
df[, ethnic := ethnic_all]
df[ethnic_all == 1001, ethnic := 1]
df[ethnic_all == 1002, ethnic := 1]
df[ethnic_all == 1003, ethnic := 1]
df[ethnic_all == 3, ethnic := 2]
df[ethnic_all == 3001, ethnic := 2]
df[ethnic_all == 3002, ethnic := 2]
df[ethnic_all == 3003, ethnic := 2]
df[ethnic_all == 4, ethnic := 3]
df[ethnic_all == 4001, ethnic := 3]
df[ethnic_all == 4002, ethnic := 3]
df[ethnic_all == 4003, ethnic := 3]
df[ethnic_all == 2, ethnic := 4]
df[ethnic_all == 2001, ethnic := 4]
df[ethnic_all == 2002, ethnic := 4]
df[ethnic_all == 2003, ethnic := 4]
df[ethnic_all == 2004, ethnic := 4]
df[ethnic_all == 3004, ethnic := 4]
df[ethnic_all == 5, ethnic := 4]
df[ethnic_all == 6, ethnic := 4]
df[ethnic_all == -1, ethnic := NA]
df[ethnic_all == -3, ethnic := NA]


# 1"White European" 2"South Asian" 3"African Caribbean" 4"Mixed or other"

df[, .N, by ="ethnic"]

```

SA and AFC vs all other variable
```{r}
df[, ethnic_sa_afc := 0]
df[ethnic == 2 | ethnic == 3, ethnic_sa_afc := 1]
df[is.na(ethnic_all), ethnic_sa_afc := NA]


df[, .N, by ="ethnic"]
df[, .N, by ="ethnic_sa_afc"]
```
## Derivation of diabetes variables from master dataset
### 1) Self-report variables
#### Self-report of gestational DM
```{r}
df[,dm_gdmonly_sr_bl := gestational_diabetes_only_f4041_0_0]
df[gestational_diabetes_only_f4041_0_0 == -2, dm_gdmonly_sr_bl := 0]
df[gestational_diabetes_only_f4041_0_0 == -3, dm_gdmonly_sr_bl := NA]
df[gestational_diabetes_only_f4041_0_0 == -1, dm_gdmonly_sr_bl := NA]

df[, .N, by="dm_gdmonly_sr_bl"]

df[, dm_gdmvsall_sr_bl := 0]
df[sex == 1, dm_gdmvsall_sr_bl := NA]
df[gestational_diabetes_only_f4041_0_0 == -3, dm_gdmvsall_sr_bl := NA]
df[gestational_diabetes_only_f4041_0_0 == -1, dm_gdmvsall_sr_bl := NA]
df[gestational_diabetes_only_f4041_0_0 == 0, dm_gdmvsall_sr_bl := 0]
df[gestational_diabetes_only_f4041_0_0 == 1, dm_gdmvsall_sr_bl := 1]

df[, .N, by="dm_gdmvsall_sr_bl"]
```


#### Current insulin Rx
```{r}
df[, dm_drug_ins_men := 0]
df[medication_for_cholesterol_blood_pressure_or_diabetes_f6177_0_0 == 3 |
        medication_for_cholesterol_blood_pressure_or_diabetes_f6177_0_1 == 3 |
        medication_for_cholesterol_blood_pressure_or_diabetes_f6177_0_2 == 3, dm_drug_ins_men := 1]
df[is.na(medication_for_cholesterol_blood_pressure_or_diabetes_f6177_0_0) |
        medication_for_cholesterol_blood_pressure_or_diabetes_f6177_0_0 == -3 |
        medication_for_cholesterol_blood_pressure_or_diabetes_f6177_0_0 == -1, dm_drug_ins_men := NA]

df[, .N, by="dm_drug_ins_men"]

df[, dm_drug_ins_women := 0]
df[medication_for_cholesterol_blood_pressure_diabetes_or_take_exogenous_hormones_f6153_0_0 == 3 |
        medication_for_cholesterol_blood_pressure_diabetes_or_take_exogenous_hormones_f6153_0_1 == 3 |
        medication_for_cholesterol_blood_pressure_diabetes_or_take_exogenous_hormones_f6153_0_2 == 3, dm_drug_ins_women := 1]
df[is.na(medication_for_cholesterol_blood_pressure_diabetes_or_take_exogenous_hormones_f6153_0_0) |
        medication_for_cholesterol_blood_pressure_diabetes_or_take_exogenous_hormones_f6153_0_0 == -3 |
        medication_for_cholesterol_blood_pressure_diabetes_or_take_exogenous_hormones_f6153_0_0 == -1, dm_drug_ins_women := NA]

df[, .N, by="dm_drug_ins_women"]


df[, dm_drug_ins_bl_sr := as.numeric(NA)] #as numeric, otherwise it is integers
df[dm_drug_ins_men == 0 | dm_drug_ins_women == 0, dm_drug_ins_bl_sr := 0]
df[dm_drug_ins_men == 1 | dm_drug_ins_women == 1, dm_drug_ins_bl_sr := 1]

df[, .N, by="dm_drug_ins_bl_sr"]

```



#### Age diagnosis

```{r}
df[, dm_agediag_sr_bl := age_diabetes_diagnosed_f2976_0_0]
df[age_diabetes_diagnosed_f2976_0_0<0, dm_agediag_sr_bl := NA]

df[, .N, dm_agediag_sr_bl]
```

#### Insulin within 12/12 diagnosis

```{r}
df[, dm_insat1yr := started_insulin_within_one_year_diagnosis_of_diabetes_f2986_0_0]
df[started_insulin_within_one_year_diagnosis_of_diabetes_f2986_0_0 == -3, dm_insat1yr := NA]
df[started_insulin_within_one_year_diagnosis_of_diabetes_f2986_0_0 == -1, dm_insat1yr := NA]

df[, .N, by="dm_insat1yr"]
df[, .N, by="started_insulin_within_one_year_diagnosis_of_diabetes_f2986_0_0"]
```


## 2) Medication variables
Derived from "parent" medication variables from self-report nurse interview data: n_20003_0_0 to n_20003_0_47\
Codes used to define the different classes of medication(contained in the above variables in wide format):\
**Insulins** (all, non-specified): 1140883066\
**Metformin** (generic name, trade name, combinations): 1140884600 | 1140874686 | 1141189090\
**Sulfonylureas** (generic names, trade names): 1140874718 | 1140874744 | 1140874746 | 1141152590 | 1141156984 | 1140874646 | 1141157284 | 1140874652 | 1140874674 | 1140874728\
**Others (acarbose generic, acarbose trade, Glucotard trade)**: 1140868902 |1140868908 | 1140857508 \
**Meglitinides** (generic names, trade names):1141173882 | 1141173786 | 1141168660\
**Glitazones** (generic names, trade names): 1141171646 | 1141171652 | 1141153254 | 1141177600 | 1141177606\
**Non-metformin OADs** (including above 4 drug classes):
1140874718 | 1140874744 | 1140874746 | 1141152590 | 1141156984 | 1140874646 | 1141157284 | 1140874652 | 1140874674 | 1140874728 |
1140868902 |1140868908 | 1140857508 | 1141173882 | 1141173786 | 1141168660 | 1141171646 | 1141171652 | 1141153254 | 1141177600 | 1141177606\

#### Insulins; dm_drug_ins_ni_bl
```{r}
df[, dm_drug_ins_ni_bl := 0]
for (i in 0:47) {
  df[get(paste0("treatmentmedication_code_f20003_0_", i)) == 1140883066,
     dm_drug_ins_ni_bl := 1]
}

df[, .N, dm_drug_ins_ni_bl]  
```

#### Metformin; dm_drug_metf_ni_bl
```{r}
df[, dm_drug_metf_ni_bl := 0]
for (i in 0:47) {
  df[get(paste0("treatmentmedication_code_f20003_0_", i)) %in% c(1140884600,
                                                                 1140874686,
                                                                 1140884600),
     dm_drug_metf_ni_bl := 1]
}

df[, .N, dm_drug_metf_ni_bl] 
```

#### Sulfonylureas; dm_drug_su_ni_bl
```{r}
df[, dm_drug_su_ni_bl := 0]

for (i in 0:47) {
  df[get(paste0("treatmentmedication_code_f20003_0_", i)) %in% c(
    1140874718,
    1140874744,
    1140874746,
    1141152590,
    1141156984,
    1140874646,
    1141157284,
    1140874652,
    1140874674,
    1140874728),
  dm_drug_su_ni_bl := 1]
}
df[, .N, dm_drug_su_ni_bl] 
```

#### Other OAD; dm_drug_other_oad_ni_bl
```{r}
df[, dm_drug_other_oad_ni_bl := 0]
for (i in 0:47) {
  df[get(paste0("treatmentmedication_code_f20003_0_", i)) %in% c(1140868902,
                                                                 1140868908,
                                                                 1140857508),
     dm_drug_other_oad_ni_bl := 1]
}

df[, .N, dm_drug_other_oad_ni_bl]

```
#### Meglitinides; dm_drug_meglit_ni_bl
```{r}
df[, dm_drug_meglit_ni_bl := 0]
for (i in 0:47) {
  df[get(paste0("treatmentmedication_code_f20003_0_", i)) %in% c(1141173882,
                                                                 1141173786,
                                                                 1141168660),
     dm_drug_meglit_ni_bl := 1]
}

df[, .N, dm_drug_meglit_ni_bl]

```
#### Glitazones; dm_drug_glitaz_ni_bl
```{r}
df[, dm_drug_glitaz_ni_bl := 0]

for (i in 0:47) {
  df[get(paste0("treatmentmedication_code_f20003_0_", i)) %in% c(
    1141171646,
    1141171652,
    1141153254,
    1141177600,
    1141177606),
  dm_drug_glitaz_ni_bl := 1]
}
df[, .N, dm_drug_glitaz_ni_bl]

```
#### Non-metformin OADs (including above 4 drug classes): dm_drug_nonmetf_oad_ni_bl
```{r}
df[, dm_drug_nonmetf_oad_ni_bl := 0]
df[dm_drug_su_ni_bl == 1 |
     dm_drug_other_oad_ni_bl == 1 |
     dm_drug_meglit_ni_bl == 1 |
     dm_drug_glitaz_ni_bl == 1, dm_drug_nonmetf_oad_ni_bl := 1]

df[, .N, by="dm_drug_nonmetf_oad_ni_bl"]
```

#### Any medication
```{r}
df[, dm_anydmrx_ni_sr_bl := 0]
df[dm_drug_ins_ni_bl==1|
      dm_drug_metf_ni_bl==1|
      dm_drug_nonmetf_oad_ni_bl==1|
      dm_drug_ins_bl_sr==1,
   dm_anydmrx_ni_sr_bl := 1]

df[, .N, by = "dm_anydmrx_ni_sr_bl"]   
```

### 3) Nurse interview variables
#### Nurse interview report of gestational DM
```{r eval}
for (i in 0:33) {
  df[get(paste0("noncancer_illness_code_selfreported_f20002_0_", i)) == 1221,
     dm_gdm_ni_bl := 1]
  df[get(paste0("noncancer_illness_code_selfreported_f20002_0_", i)) == 1221,
     dm_agediag_gdm_ni_bl := get(
       paste0(
         "interpolated_age_of_participant_when_noncancer_illness_first_diagnosed_f20009_0_",
         i
       )
     )]
}
```

#### Nurse interview - all DM
```{r}
for (i in 0:33) {
  df[get(paste0("noncancer_illness_code_selfreported_f20002_0_",i))==1220, 
      dm_alldm_ni_bl := 1]
  df[get(paste0("noncancer_illness_code_selfreported_f20002_0_",i))==1220, 
     dm_agediag_alldm_ni_bl := get(paste0("interpolated_age_of_participant_when_noncancer_illness_first_diagnosed_f20009_0_",i))]
}
```

#### Nurse interview - type 1 DM
```{r}
for (i in 0:33) {
  df[get(paste0("noncancer_illness_code_selfreported_f20002_0_",i))==1222, 
      dm_t1dm_ni_bl := 1]
  df[get(paste0("noncancer_illness_code_selfreported_f20002_0_",i))==1222, 
     dm_agediag_t1dm_ni_bl := get(paste0("interpolated_age_of_participant_when_noncancer_illness_first_diagnosed_f20009_0_",i))]
}
```

#### Nurse interview - type 2 DM
```{r}
for (i in 0:33) {
  df[get(paste0("noncancer_illness_code_selfreported_f20002_0_",i))==1223, 
      dm_t2dm_ni_bl := 1]
  df[get(paste0("noncancer_illness_code_selfreported_f20002_0_",i))==1223, 
     dm_agediag_t2dm_ni_bl := get(paste0("interpolated_age_of_participant_when_noncancer_illness_first_diagnosed_f20009_0_",i))]
}
```

#### This converts 10 people with T1 and T2 diagnoses to non-specific
```{r}
df[, dummy_t1t2dm := NA]
df[dm_t1dm_ni_bl==1 & dm_t2dm_ni_bl==1, dummy_t1t2dm := 1]
df[, .N, by="dummy_t1t2dm"]

df[dummy_t1t2dm==1, dm_alldm_ni_bl := 1]
df[dummy_t1t2dm==1, dm_t1dm_ni_bl := NA]
df[dummy_t1t2dm==1, dm_t2dm_ni_bl := NA]
```

#### NI report of any dm or T1 or T2 DM
```{r}
df[, dm_anynsgt1t2_ni_bl := as.numeric(NA)] # as.numeric otherwise integer
df[dm_alldm_ni_bl==1|dm_gdm_ni_bl==1|dm_t1dm_ni_bl==1|dm_t2dm_ni_bl==1, dm_anynsgt1t2_ni_bl := 1]
df[, .N, by="dm_anynsgt1t2_ni_bl"]
```

#### Ages combined from TS and NI
```{r}
df[, dm_agedm_ts_or_ni := dm_agediag_alldm_ni_bl]

df[is.na(dm_agediag_alldm_ni_bl) &
     is.na(dm_agediag_t1dm_ni_bl) &
     is.na(dm_agediag_t2dm_ni_bl) & dm_gdmonly_sr_bl != 1,
   dm_agedm_ts_or_ni := dm_agediag_sr_bl]

df[dm_t1dm_ni_bl == 1, dm_agedm_ts_or_ni := dm_agediag_t1dm_ni_bl]

df[dm_t2dm_ni_bl == 1, dm_agedm_ts_or_ni := dm_agediag_t2dm_ni_bl]

df[is.na(dm_agediag_sr_bl) &
     is.na(dm_agediag_alldm_ni_bl) &
     is.na(dm_agediag_t1dm_ni_bl) &
     is.na(dm_agediag_t2dm_ni_bl), dm_agedm_ts_or_ni := NA]

df[dm_agedm_ts_or_ni < 0, dm_agedm_ts_or_ni := NA]

count(df, dm_agedm_ts_or_ni)
```


## Flowchart 1:Starting categories  for Diabetes Classification
#### 1.1
```{r} 
df[, rule_1_1_continue := 0]
df[dm_gdmonly_sr_bl == 1 |
     dm_alldm_ni_bl == 1 |
     dm_gdm_ni_bl == 1 |
     dm_t1dm_ni_bl == 1 |
     dm_t2dm_ni_bl == 1 |
     dm_drug_ins_ni_bl == 1 |
     dm_drug_ins_bl_sr == 1 |
     dm_drug_metf_ni_bl == 1 |
     dm_drug_nonmetf_oad_ni_bl == 1, rule_1_1_continue := 1]
df[dm_gdmonly_sr_bl == 1 & sex == 1, rule_1_1_continue := 0]
df[dm_gdm_ni_bl == 1 & sex == 1, rule_1_1_continue := 0]

df[, .N, by="rule_1_1_continue"]

df[, rule_1_1_exit := rule_1_1_continue]
df[rule_1_1_continue == 1, rule_1_1_exit := 0]
df[rule_1_1_continue == 0, rule_1_1_exit := 1]

df[, .N, by="rule_1_1_exit"]

```

#### 1.2
```{r}
df[, rule_1_2_exit := 0]
df[dm_gdmonly_sr_bl==1 & dm_anydmrx_ni_sr_bl %in% c(0,NA) & dm_t1dm_ni_bl %in% c(0,NA) & dm_t2dm_ni_bl %in% c(0,NA), rule_1_2_exit := 1]
df[dm_gdm_ni_bl==1 & dm_agediag_gdm_ni_bl<50 & dm_anydmrx_ni_sr_bl %in% c(0,NA) & dm_t1dm_ni_bl %in% c(0,NA) & dm_t2dm_ni_bl %in% c(0,NA), rule_1_2_exit := 1]
df[rule_1_1_continue %in% c(0, NA), rule_1_2_exit := NA] 

df[, .N, by="rule_1_2_exit"]

df[, rule_1_2_continue := rule_1_2_exit]
df[rule_1_2_exit == 1, rule_1_2_continue := 0]
df[rule_1_2_exit == 0, rule_1_2_continue := 1]

df[, .N, by="rule_1_2_continue"]
```

#### 1.3
```{r}
df[, rule_1_3_exit := 0]
df[dm_drug_nonmetf_oad_ni_bl==1, rule_1_3_exit := 1]
df[rule_1_2_continue %in% c(0,NA), rule_1_3_exit := NA]

df[, rule_1_3_exit := 0]
df[dm_drug_nonmetf_oad_ni_bl==1, rule_1_3_exit := 1]
df[rule_1_2_continue %in% c(0, NA), rule_1_3_exit := NA]  

df[, .N, by="rule_1_3_exit"]

df[, rule_1_3_continue := rule_1_3_exit]
df[rule_1_3_exit == 1, rule_1_3_continue := 0]
df[rule_1_3_exit == 0, rule_1_3_continue := 1]

df[, .N, by="rule_1_3_continue"]
```

#### 1.4
```{r}
df[, rule_1_4_continue := 0]
df[!is.na(dm_agedm_ts_or_ni) & dm_agedm_ts_or_ni>0 & dm_agedm_ts_or_ni<31 & ethnic_sa_afc==1, rule_1_4_continue := 1]
df[!is.na(dm_agedm_ts_or_ni) & dm_agedm_ts_or_ni>0 & dm_agedm_ts_or_ni<37 & ethnic_sa_afc==0, rule_1_4_continue := 1]
df[rule_1_3_continue %in% c(0, NA), rule_1_4_continue := NA]
count(df, rule_1_4_continue)

df[, rule_1_4_exit := rule_1_4_continue]
df[rule_1_4_continue == 1, rule_1_4_exit := 0]
df[rule_1_4_continue == 0, rule_1_4_exit := 1]

df[, .N, by="rule_1_4_exit"]

count(df, dm_agedm_ts_or_ni)
```

#### 1.5
```{r}
df[, rule_1_5_poss_t1 := 0]
df[dm_drug_ins_bl_sr==1 |  dm_drug_ins_ni_bl==1 | dm_insat1yr==1 | dm_t1dm_ni_bl==1, rule_1_5_poss_t1 := 1]
df[ rule_1_4_continue %in% c(0,NA), rule_1_5_poss_t1 := NA]
df[, .N, by="rule_1_5_poss_t1"]


df[,rule_1_5_poss_t2 := rule_1_5_poss_t1] 
df[rule_1_5_poss_t1 == 1, rule_1_5_poss_t2 := 0]  
df[rule_1_5_poss_t1 == 0, rule_1_5_poss_t2 := 1]  
df[, .N, by="rule_1_5_poss_t2"]
```

#### Creating flowchart 1 exit variables
```{r}
df[, fc1_no_diabetes := rule_1_1_exit]
df[, .N, by="fc1_no_diabetes"]

df[, fc1_poss_gdm := rule_1_2_exit]
df[is.na(fc1_poss_gdm), fc1_poss_gdm := 0]
df[, .N, by="fc1_poss_gdm"]

df[, fc1_poss_t2dm := 0]
df[rule_1_3_exit==1, fc1_poss_t2dm := 1]
df[rule_1_4_exit==1, fc1_poss_t2dm := 1]
df[rule_1_5_poss_t2==1, fc1_poss_t2dm := 1]
df[, .N, by="fc1_poss_t2dm"]

df[, fc1_poss_t1dm := 0] 
df[rule_1_5_poss_t1==1, fc1_poss_t1dm := 1] 
df[, .N, by="fc1_poss_t1dm"]
```

## Flowchart 2:Type 1 categories  for Diabetes Classification
### Starting point (from FC1): fc1_poss_t1dm==1

#### Rule 2.1
```{r}
df[, rule_2_1_exit := 0]
df[dm_t1dm_ni_bl==1, rule_2_1_exit := 1]
df[rule_1_5_poss_t1 %in% c(0, NA), rule_2_1_exit := NA]
df[, .N, by="rule_2_1_exit"]

df[, rule_2_1_continue := rule_2_1_exit]
df[rule_2_1_exit == 1, rule_2_1_continue := 0]
df[rule_2_1_exit == 0, rule_2_1_continue := 1]

df[, .N, by="rule_2_1_continue"]
```

#### Rule 2.2
```{r}
df[, rule_2_2_prob_t1 := 0]
df[dm_drug_ins_bl_sr==1 & dm_insat1yr==1, rule_2_2_prob_t1 := 1]
df[dm_drug_ins_ni_bl==1 & dm_insat1yr==1 , rule_2_2_prob_t1 := 1]
df[rule_2_1_continue %in% c(0,NA), rule_2_2_prob_t1 := NA]
df[, .N, by="rule_2_2_prob_t1"]

df[, rule_2_2_poss_t1 := rule_2_2_prob_t1]
df[rule_2_2_prob_t1 == 0,  rule_2_2_poss_t1 := 1]
df[rule_2_2_prob_t1 == 1,  rule_2_2_poss_t1 := 0]
df[, .N, by="rule_2_2_poss_t1"]
```

#### Creating post-flowchart 2 variables
```{r}
df[, fc2_prob_t1dm := 0]
df[rule_2_1_exit==1, fc2_prob_t1dm := 1]
df[rule_2_2_prob_t1==1, fc2_prob_t1dm := 1]
  
df[, .N, by="fc2_prob_t1dm"]

df[, fc2_poss_t1dm := 0]
df[rule_2_2_poss_t1==1, fc2_poss_t1dm := 1]
df[, .N, by="fc2_poss_t1dm"]
```

## Flowchart 3:Type 2 categories  for Diabetes Classification
#### Starting point (from FC1): fc1_poss_t2dm==1

#### Rule 3.1

```{r}
df[, rule_3_1_exit := 0]
df[dm_drug_metf_ni_bl==1, rule_3_1_exit := 1]
df[dm_drug_ins_bl_sr==1 |dm_drug_ins_ni_bl==1|dm_drug_nonmetf_oad_ni_bl==1, rule_3_1_exit := 0]
df[fc1_poss_t2dm %in% c(0,NA), rule_3_1_exit := NA]
df[, .N, by="rule_3_1_exit"]
count(df, dm_drug_metf_ni_bl, rule_3_1_exit)

df[, rule_3_1_continue := rule_3_1_exit]
df[rule_3_1_exit == 0, rule_3_1_continue := 1]
df[rule_3_1_exit == 1, rule_3_1_continue := 0]
df[, .N, by="rule_3_1_continue"]
```


#### Rule 3.2
```{r}
df[, rule_3_2_exit := 0]
df[dm_anynsgt1t2_ni_bl %in% c(0,NA), rule_3_2_exit := 1]
df[rule_3_1_exit %in% c(0,NA), rule_3_2_exit := NA]
df[, .N, by="rule_3_2_exit"]

df[, rule_3_2_continue := rule_3_2_exit]
df[rule_3_2_exit == 0, rule_3_2_continue := 1]
df[rule_3_2_exit == 1, rule_3_2_continue := 0]
df[, .N, by="rule_3_2_continue"]
```

#### Rule 3.3
```{r}
df[, rule_3_3_exit := as.numeric(NA)]
df[rule_3_1_continue==1|rule_3_2_continue==1, rule_3_3_exit := 0]  
df[dm_drug_nonmetf_oad_ni_bl==1, rule_3_3_exit := 1]
df[, .N, by="rule_3_3_exit"]

df[, rule_3_3_continue := rule_3_3_exit]
df[rule_3_3_exit == 0, rule_3_3_continue := 1]
df[rule_3_3_exit == 1, rule_3_3_continue := 0]
df[, .N, by="rule_3_3_continue"]
```

#### Rule 3.4
```{r}
df[, rule_3_4_exit := 0]
df[dm_drug_ins_bl_sr %in% c(0,NA) & dm_drug_ins_ni_bl%in% c(0,NA), rule_3_4_exit := 1]
df[rule_3_3_continue %in% c(0,NA), rule_3_4_exit := NA]
df[, .N, by="rule_3_4_exit"]

df[, rule_3_4_continue := rule_3_4_exit]
df[rule_3_4_exit == 0, rule_3_4_continue := 1]
df[rule_3_4_exit == 1, rule_3_4_continue := 0]
df[, .N, by="rule_3_4_continue"]
```

#### Rule 3.5
```{r}
df[, rule_3_5_poss_t1 := 0]
df[dm_t1dm_ni_bl==1, rule_3_5_poss_t1 := 1]
df[rule_3_4_continue %in% c(0,NA), rule_3_5_poss_t1 := NA]
df[, .N, by="rule_3_5_poss_t1"]

df[, rule_3_5_poss_t2 := rule_3_5_poss_t1]
df[rule_3_5_poss_t1 == 0, rule_3_5_poss_t2 := 1]
df[rule_3_5_poss_t1 == 1, rule_3_5_poss_t2 := 0]
df[, .N, by="rule_3_5_poss_t2"]
```

## Creating post-flowchart 3 variables

```{r}
df[, fc3_no_diabetes := rule_3_2_exit]

df[, fc3_prob_t2dm := 0]
df[rule_3_3_exit==1, fc3_prob_t2dm := 1]
df[rule_3_4_exit==1, fc3_prob_t2dm := 1]

df[, fc3_poss_t2dm := 0]
df[rule_3_5_poss_t2==1, fc3_poss_t2dm := 1]
  
df[, fc3_prob_t1dm := 0]
df[rule_3_5_poss_t1==1, fc3_prob_t1dm := 1]

df[, .N, by="fc3_no_diabetes"]
df[, .N, by="fc3_prob_t2dm"]
df[, .N, by="fc3_poss_t2dm"]
df[, .N, by="fc3_prob_t1dm"]
```


## Consolidation of algorithm ending states

Diabetes unlikely; sr_unlikely_diabetes
```{r}
df[, sr_unlikely_diabetes := fc1_no_diabetes]
df[fc3_no_diabetes==1, sr_unlikely_diabetes := 1]
df[, .N, by="sr_unlikely_diabetes"]
```
Possible gestational diabetes;sr_poss_gest_diabetes
```{r}
df[, sr_poss_gest_diabetes := fc1_poss_gdm]
df[, .N, by="sr_poss_gest_diabetes"]
```
Possible type 2 diabetes;sr_poss_t2_diabetes
```{r}
df[, sr_poss_t2_diabetes := fc3_poss_t2dm]
df[, .N, by="sr_poss_t2_diabetes"]
```

Probable type 2 diabetes;sr_prob_t2_diabetes
```{r}
df[, sr_prob_t2_diabetes := fc3_prob_t2dm]
df[, .N, by="sr_prob_t2_diabetes"]
```

Possible type 1 diabetes;sr_poss_t1_diabetes
```{r}
df[, sr_poss_t1_diabetes := fc2_poss_t1dm]
df[, .N, by="sr_poss_t1_diabetes"]
```

Probable type 1 diabetes;sr_prob_t1_diabetes
```{r}
df[, sr_prob_t1_diabetes := fc2_prob_t1dm]
df[fc3_prob_t1dm==1, sr_prob_t1_diabetes := 1]
df[, .N, by="sr_prob_t1_diabetes"]
```

## Combine all into 1 var
```{r}
df[, adj_dmstatus_bl := as.numeric(NA)]
df[sr_unlikely_diabetes==1, adj_dmstatus_bl := 0]
df[sr_poss_gest_diabetes==1, adj_dmstatus_bl := 1]
df[sr_prob_t1_diabetes==1, adj_dmstatus_bl := 2]
df[sr_poss_t1_diabetes==1, adj_dmstatus_bl := 3]
df[sr_prob_t2_diabetes==1, adj_dmstatus_bl := 4] 
df[sr_poss_t2_diabetes==1, adj_dmstatus_bl := 5]

df[, .N, by="adj_dmstatus_bl"]
```

## Create poss/ prov T1DM and poss/ prob T2 dm var: adj_probposs_t1dm  adj_probposs_t2dm
```{r}
df[adj_dmstatus_bl==2| adj_dmstatus_bl==3, adj_probposs_t1dm := 1]
df[is.na(adj_probposs_t1dm), adj_probposs_t1dm := 0]
df[, .N, by="adj_probposs_t1dm"]

df[adj_dmstatus_bl==4| adj_dmstatus_bl==5, adj_probposs_t2dm := 1]
df[is.na(adj_probposs_t2dm), adj_probposs_t2dm := 0]
df[, .N, by="adj_probposs_t2dm"]
```




